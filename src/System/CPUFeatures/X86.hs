{-# LANGUAGE CPP #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE MagicHash #-}
{-# LANGUAGE UnliftedFFITypes #-}
module System.CPUFeatures.X86
  (AESNI, bAESNI, sAESNI
  ,AMX_BF16, bAMX_BF16, sAMX_BF16
  ,AMX_FP16, bAMX_FP16, sAMX_FP16
  ,AMX_INT8, bAMX_INT8, sAMX_INT8
  ,AMX_TILE, bAMX_TILE, sAMX_TILE
  ,AVX, bAVX, sAVX
  ,AVX_VNNI, bAVX_VNNI, sAVX_VNNI
  ,AVX10_1, bAVX10_1, sAVX10_1
  ,AVX10_2, bAVX10_2, sAVX10_2
  ,AVX10_VL256, bAVX10_VL256, sAVX10_VL256
  ,AVX10_VL512, bAVX10_VL512, sAVX10_VL512
  ,AVX2, bAVX2, sAVX2
  ,AVX512_BF16, bAVX512_BF16, sAVX512_BF16
  ,AVX512_BF16_VL256, bAVX512_BF16_VL256, sAVX512_BF16_VL256
  ,AVX512_BF16_VL512, bAVX512_BF16_VL512, sAVX512_BF16_VL512
  ,AVX512_BITALG, bAVX512_BITALG, sAVX512_BITALG
  ,AVX512_BITALG_VL256, bAVX512_BITALG_VL256, sAVX512_BITALG_VL256
  ,AVX512_BITALG_VL512, bAVX512_BITALG_VL512, sAVX512_BITALG_VL512
  ,AVX512_FP16, bAVX512_FP16, sAVX512_FP16
  ,AVX512_FP16_SCALAR, bAVX512_FP16_SCALAR, sAVX512_FP16_SCALAR
  ,AVX512_FP16_VL256, bAVX512_FP16_VL256, sAVX512_FP16_VL256
  ,AVX512_FP16_VL512, bAVX512_FP16_VL512, sAVX512_FP16_VL512
  ,AVX512_IFMA, bAVX512_IFMA, sAVX512_IFMA
  ,AVX512_IFMA_VL256, bAVX512_IFMA_VL256, sAVX512_IFMA_VL256
  ,AVX512_IFMA_VL512, bAVX512_IFMA_VL512, sAVX512_IFMA_VL512
  ,AVX512_VBMI, bAVX512_VBMI, sAVX512_VBMI
  ,AVX512_VBMI_VL256, bAVX512_VBMI_VL256, sAVX512_VBMI_VL256
  ,AVX512_VBMI_VL512, bAVX512_VBMI_VL512, sAVX512_VBMI_VL512
  ,AVX512_VBMI2, bAVX512_VBMI2, sAVX512_VBMI2
  ,AVX512_VBMI2_VL256, bAVX512_VBMI2_VL256, sAVX512_VBMI2_VL256
  ,AVX512_VBMI2_VL512, bAVX512_VBMI2_VL512, sAVX512_VBMI2_VL512
  ,AVX512_VNNI, bAVX512_VNNI, sAVX512_VNNI
  ,AVX512_VNNI_VL256, bAVX512_VNNI_VL256, sAVX512_VNNI_VL256
  ,AVX512_VNNI_VL512, bAVX512_VNNI_VL512, sAVX512_VNNI_VL512
  ,AVX512_VPOPCNTDQ, bAVX512_VPOPCNTDQ, sAVX512_VPOPCNTDQ
  ,AVX512_VPOPCNTDQ_VL256, bAVX512_VPOPCNTDQ_VL256, sAVX512_VPOPCNTDQ_VL256
  ,AVX512_VPOPCNTDQ_VL512, bAVX512_VPOPCNTDQ_VL512, sAVX512_VPOPCNTDQ_VL512
  ,AVX512BW, bAVX512BW, sAVX512BW
  ,AVX512BW_MASK, bAVX512BW_MASK, sAVX512BW_MASK
  ,AVX512BW_VL256, bAVX512BW_VL256, sAVX512BW_VL256
  ,AVX512BW_VL512, bAVX512BW_VL512, sAVX512BW_VL512
  ,AVX512CD, bAVX512CD, sAVX512CD
  ,AVX512CD_VL256, bAVX512CD_VL256, sAVX512CD_VL256
  ,AVX512CD_VL512, bAVX512CD_VL512, sAVX512CD_VL512
  ,AVX512DQ, bAVX512DQ, sAVX512DQ
  ,AVX512DQ_SCALAR, bAVX512DQ_SCALAR, sAVX512DQ_SCALAR
  ,AVX512DQ_VL256, bAVX512DQ_VL256, sAVX512DQ_VL256
  ,AVX512DQ_VL512, bAVX512DQ_VL512, sAVX512DQ_VL512
  ,AVX512F, bAVX512F, sAVX512F
  ,AVX512F_SCALAR, bAVX512F_SCALAR, sAVX512F_SCALAR
  ,AVX512F_VL256, bAVX512F_VL256, sAVX512F_VL256
  ,AVX512F_VL512, bAVX512F_VL512, sAVX512F_VL512
  ,AVX512VL, bAVX512VL, sAVX512VL
  ,BMI1, bBMI1, sBMI1
  ,BMI2, bBMI2, sBMI2
  ,F16C, bF16C, sF16C
  ,FMA, bFMA, sFMA
  ,GFNI, bGFNI, sGFNI
  ,PCLMULQDQ, bPCLMULQDQ, sPCLMULQDQ
  ,POPCNT, bPOPCNT, sPOPCNT
  ,RDRAND, bRDRAND, sRDRAND
  ,SHA, bSHA, sSHA
  ,SSE3, bSSE3, sSSE3
  ,SSE4_1, bSSE4_1, sSSE4_1
  ,SSE4_2, bSSE4_2, sSSE4_2
  ,SSSE3, bSSSE3, sSSSE3
  ,VAES, bVAES, sVAES
  ,VPCLMULQDQ, bVPCLMULQDQ, sVPCLMULQDQ
  ,mAVX10
  ,SBool(..)
  ) where
import System.CPUFeatures.Util
#if defined(x86_64_HOST_ARCH)
import System.CPUFeatures.X86.Cpuid
import Data.Bits
import Data.Maybe (isJust)
#if defined(darwin_HOST_OS)
import GHC.Exts (Addr#)
#endif
#endif

type family AESNI :: Bool
type family AMX_BF16 :: Bool
type family AMX_FP16 :: Bool
type family AMX_INT8 :: Bool
type family AMX_TILE :: Bool
type family AVX :: Bool
type family AVX_VNNI :: Bool
type family AVX10_1 :: Bool
type family AVX10_2 :: Bool
type family AVX10_VL256 :: Bool
type family AVX10_VL512 :: Bool
type family AVX2 :: Bool
type family AVX512_BF16 :: Bool
type family AVX512_BF16_VL256 :: Bool
type family AVX512_BF16_VL512 :: Bool
type family AVX512_BITALG :: Bool
type family AVX512_BITALG_VL256 :: Bool
type family AVX512_BITALG_VL512 :: Bool
type family AVX512_FP16 :: Bool
type family AVX512_FP16_SCALAR :: Bool
type family AVX512_FP16_VL256 :: Bool
type family AVX512_FP16_VL512 :: Bool
type family AVX512_IFMA :: Bool
type family AVX512_IFMA_VL256 :: Bool
type family AVX512_IFMA_VL512 :: Bool
type family AVX512_VBMI :: Bool
type family AVX512_VBMI_VL256 :: Bool
type family AVX512_VBMI_VL512 :: Bool
type family AVX512_VBMI2 :: Bool
type family AVX512_VBMI2_VL256 :: Bool
type family AVX512_VBMI2_VL512 :: Bool
type family AVX512_VNNI :: Bool
type family AVX512_VNNI_VL256 :: Bool
type family AVX512_VNNI_VL512 :: Bool
type family AVX512_VPOPCNTDQ :: Bool
type family AVX512_VPOPCNTDQ_VL256 :: Bool
type family AVX512_VPOPCNTDQ_VL512 :: Bool
type family AVX512BW :: Bool
type family AVX512BW_MASK :: Bool
type family AVX512BW_VL256 :: Bool
type family AVX512BW_VL512 :: Bool
type family AVX512CD :: Bool
type family AVX512CD_VL256 :: Bool
type family AVX512CD_VL512 :: Bool
type family AVX512DQ :: Bool
type family AVX512DQ_SCALAR :: Bool
type family AVX512DQ_VL256 :: Bool
type family AVX512DQ_VL512 :: Bool
type family AVX512F :: Bool
type family AVX512F_SCALAR :: Bool
type family AVX512F_VL256 :: Bool
type family AVX512F_VL512 :: Bool
type family AVX512VL :: Bool
type family BMI1 :: Bool
type family BMI2 :: Bool
type family F16C :: Bool
type family FMA :: Bool
type family GFNI :: Bool
type family PCLMULQDQ :: Bool
type family POPCNT :: Bool
type family RDRAND :: Bool
type family SHA :: Bool
type family SSE3 :: Bool
type family SSE4_1 :: Bool
type family SSE4_2 :: Bool
type family SSSE3 :: Bool
type family VAES :: Bool
type family VPCLMULQDQ :: Bool

bAESNI :: Bool
bAMX_BF16 :: Bool
bAMX_FP16 :: Bool
bAMX_INT8 :: Bool
bAMX_TILE :: Bool
bAVX :: Bool
bAVX_VNNI :: Bool
bAVX10_1 :: Bool
bAVX10_2 :: Bool
bAVX10_VL256 :: Bool
bAVX10_VL512 :: Bool
bAVX2 :: Bool
bAVX512_BF16 :: Bool
bAVX512_BF16_VL256 :: Bool
bAVX512_BF16_VL512 :: Bool
bAVX512_BITALG :: Bool
bAVX512_BITALG_VL256 :: Bool
bAVX512_BITALG_VL512 :: Bool
bAVX512_FP16 :: Bool
bAVX512_FP16_SCALAR :: Bool
bAVX512_FP16_VL256 :: Bool
bAVX512_FP16_VL512 :: Bool
bAVX512_IFMA :: Bool
bAVX512_IFMA_VL256 :: Bool
bAVX512_IFMA_VL512 :: Bool
bAVX512_VBMI :: Bool
bAVX512_VBMI_VL256 :: Bool
bAVX512_VBMI_VL512 :: Bool
bAVX512_VBMI2 :: Bool
bAVX512_VBMI2_VL256 :: Bool
bAVX512_VBMI2_VL512 :: Bool
bAVX512_VNNI :: Bool
bAVX512_VNNI_VL256 :: Bool
bAVX512_VNNI_VL512 :: Bool
bAVX512_VPOPCNTDQ :: Bool
bAVX512_VPOPCNTDQ_VL256 :: Bool
bAVX512_VPOPCNTDQ_VL512 :: Bool
bAVX512BW :: Bool
bAVX512BW_MASK :: Bool
bAVX512BW_VL256 :: Bool
bAVX512BW_VL512 :: Bool
bAVX512CD :: Bool
bAVX512CD_VL256 :: Bool
bAVX512CD_VL512 :: Bool
bAVX512DQ :: Bool
bAVX512DQ_SCALAR :: Bool
bAVX512DQ_VL256 :: Bool
bAVX512DQ_VL512 :: Bool
bAVX512F :: Bool
bAVX512F_SCALAR :: Bool
bAVX512F_VL256 :: Bool
bAVX512F_VL512 :: Bool
bAVX512VL :: Bool
bBMI1 :: Bool
bBMI2 :: Bool
bF16C :: Bool
bFMA :: Bool
bGFNI :: Bool
bPCLMULQDQ :: Bool
bPOPCNT :: Bool
bRDRAND :: Bool
bSHA :: Bool
bSSE3 :: Bool
bSSE4_1 :: Bool
bSSE4_2 :: Bool
bSSSE3 :: Bool
bVAES :: Bool
bVPCLMULQDQ :: Bool

mAVX10 :: Maybe Int

sAESNI :: SBool AESNI
sAMX_BF16 :: SBool AMX_BF16
sAMX_FP16 :: SBool AMX_FP16
sAMX_INT8 :: SBool AMX_INT8
sAMX_TILE :: SBool AMX_TILE
sAVX :: SBool AVX
sAVX_VNNI :: SBool AVX_VNNI
sAVX10_1 :: SBool AVX10_1
sAVX10_2 :: SBool AVX10_2
sAVX10_VL256 :: SBool AVX10_VL256
sAVX10_VL512 :: SBool AVX10_VL512
sAVX2 :: SBool AVX2
sAVX512_BF16 :: SBool AVX512_BF16
sAVX512_BF16_VL256 :: SBool AVX512_BF16_VL256
sAVX512_BF16_VL512 :: SBool AVX512_BF16_VL512
sAVX512_BITALG :: SBool AVX512_BITALG
sAVX512_BITALG_VL256 :: SBool AVX512_BITALG_VL256
sAVX512_BITALG_VL512 :: SBool AVX512_BITALG_VL512
sAVX512_FP16 :: SBool AVX512_FP16
sAVX512_FP16_SCALAR :: SBool AVX512_FP16_SCALAR
sAVX512_FP16_VL256 :: SBool AVX512_FP16_VL256
sAVX512_FP16_VL512 :: SBool AVX512_FP16_VL512
sAVX512_IFMA :: SBool AVX512_IFMA
sAVX512_IFMA_VL256 :: SBool AVX512_IFMA_VL256
sAVX512_IFMA_VL512 :: SBool AVX512_IFMA_VL512
sAVX512_VBMI :: SBool AVX512_VBMI
sAVX512_VBMI_VL256 :: SBool AVX512_VBMI_VL256
sAVX512_VBMI_VL512 :: SBool AVX512_VBMI_VL512
sAVX512_VBMI2 :: SBool AVX512_VBMI2
sAVX512_VBMI2_VL256 :: SBool AVX512_VBMI2_VL256
sAVX512_VBMI2_VL512 :: SBool AVX512_VBMI2_VL512
sAVX512_VNNI :: SBool AVX512_VNNI
sAVX512_VNNI_VL256 :: SBool AVX512_VNNI_VL256
sAVX512_VNNI_VL512 :: SBool AVX512_VNNI_VL512
sAVX512_VPOPCNTDQ :: SBool AVX512_VPOPCNTDQ
sAVX512_VPOPCNTDQ_VL256 :: SBool AVX512_VPOPCNTDQ_VL256
sAVX512_VPOPCNTDQ_VL512 :: SBool AVX512_VPOPCNTDQ_VL512
sAVX512BW :: SBool AVX512BW
sAVX512BW_MASK :: SBool AVX512BW_MASK
sAVX512BW_VL256 :: SBool AVX512BW_VL256
sAVX512BW_VL512 :: SBool AVX512BW_VL512
sAVX512CD :: SBool AVX512CD
sAVX512CD_VL256 :: SBool AVX512CD_VL256
sAVX512CD_VL512 :: SBool AVX512CD_VL512
sAVX512DQ :: SBool AVX512DQ
sAVX512DQ_SCALAR :: SBool AVX512DQ_SCALAR
sAVX512DQ_VL256 :: SBool AVX512DQ_VL256
sAVX512DQ_VL512 :: SBool AVX512DQ_VL512
sAVX512F :: SBool AVX512F
sAVX512F_SCALAR :: SBool AVX512F_SCALAR
sAVX512F_VL256 :: SBool AVX512F_VL256
sAVX512F_VL512 :: SBool AVX512F_VL512
sAVX512VL :: SBool AVX512VL
sBMI1 :: SBool BMI1
sBMI2 :: SBool BMI2
sF16C :: SBool F16C
sFMA :: SBool FMA
sGFNI :: SBool GFNI
sPCLMULQDQ :: SBool PCLMULQDQ
sPOPCNT :: SBool POPCNT
sRDRAND :: SBool RDRAND
sSHA :: SBool SHA
sSSE3 :: SBool SSE3
sSSE4_1 :: SBool SSE4_1
sSSE4_2 :: SBool SSE4_2
sSSSE3 :: SBool SSSE3
sVAES :: SBool VAES
sVPCLMULQDQ :: SBool VPCLMULQDQ

#if defined(x86_64_HOST_ARCH)

{-# NOINLINE cpuid_01 #-}
cpuid_01 :: CpuidResult
cpuid_01 = cpuid 0x1 0

{-# NOINLINE cpuid_07_0 #-}
cpuid_07_0 :: CpuidResult
cpuid_07_0 = cpuid 0x7 0

{-# NOINLINE cpuid_07_1 #-}
cpuid_07_1 :: CpuidResult
cpuid_07_1 = cpuid 0x7 1

{-# NOINLINE cpuid_24_0 #-}
cpuid_24_0 :: CpuidResult
cpuid_24_0 = cpuid 0x24 0

{-# NOINLINE cpuid_24_1 #-}
cpuid_24_1 :: CpuidResult
cpuid_24_1 = cpuid 0x24 1

#if defined(darwin_HOST_OS)
foreign import ccall unsafe hs_cpu_features_sysctl :: Addr# -> Bool
#endif

{-# NOINLINE mAVX10 #-}
mAVX10 | testBit (edx cpuid_07_1) 19 = let !version = fromIntegral (ebx cpuid_24_0 .&. 0xff)
                                       in Just version
       | otherwise = Nothing

bAESNI = testBit (ecx cpuid_01) 25
bAMX_BF16 = testBit (edx cpuid_07_0) 22
bAMX_FP16 = testBit (eax cpuid_07_1) 21
bAMX_INT8 = testBit (edx cpuid_07_0) 25
bAMX_TILE = testBit (edx cpuid_07_0) 24
{-# NOINLINE bAVX #-}
bAVX = (ecx cpuid_01 .&. (bit 27 .|. bit 28)) == bit 27 .|. bit 28 && (xgetbv 0 .&. 6) == 6 -- bit 27: OSXSAVE, bit 28: AVX
bAVX_VNNI = testBit (eax cpuid_07_1) 4
bAVX10_1 = mAVX10 >= Just 1
bAVX10_2 = mAVX10 >= Just 2
bAVX10_VL256 = isJust mAVX10 && testBit (ebx cpuid_24_0) 17
bAVX10_VL512 = isJust mAVX10 && testBit (ebx cpuid_24_0) 18
bAVX2 = bAVX && testBit (ebx cpuid_07_0) 5
bAVX512_BF16 = bAVX512F && testBit (eax cpuid_07_1) 5
bAVX512_BF16_VL256 = (bAVX512_BF16 && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_BF16_VL512 = bAVX512_BF16 || (bAVX10_1 && bAVX10_VL512)
bAVX512_BITALG = bAVX512F && testBit (ecx cpuid_07_0) 12
bAVX512_BITALG_VL256 = (bAVX512_BITALG && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_BITALG_VL512 = bAVX512_BITALG || (bAVX10_1 && bAVX10_VL512)
bAVX512_FP16 = bAVX512F && testBit (edx cpuid_07_0) 23
bAVX512_FP16_SCALAR = bAVX512_FP16 || (bAVX10_1 && bAVX10_VL256)
bAVX512_FP16_VL256 = (bAVX512_FP16 && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_FP16_VL512 = bAVX512_FP16 || (bAVX10_1 && bAVX10_VL512)
bAVX512_IFMA = bAVX512F && testBit (ebx cpuid_07_0) 21
bAVX512_IFMA_VL256 = (bAVX512_IFMA && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_IFMA_VL512 = bAVX512_IFMA || (bAVX10_1 && bAVX10_VL512)
bAVX512_VBMI = bAVX512F && testBit (ecx cpuid_07_0) 1
bAVX512_VBMI_VL256 = (bAVX512_VBMI && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_VBMI_VL512 = bAVX512_VBMI || (bAVX10_1 && bAVX10_VL512)
bAVX512_VBMI2 = bAVX512F && testBit (ecx cpuid_07_0) 6
bAVX512_VBMI2_VL256 = (bAVX512_VBMI2 && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_VBMI2_VL512 = bAVX512_VBMI2 || (bAVX10_1 && bAVX10_VL512)
bAVX512_VNNI = bAVX512F && testBit (ecx cpuid_07_0) 11
bAVX512_VNNI_VL256 = (bAVX512_VNNI && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_VNNI_VL512 = bAVX512_VNNI || (bAVX10_1 && bAVX10_VL512)
-- bAVX512_VP2INTERSECT = bAVX512F && testBit (edx cpuid_07_0) 8
bAVX512_VPOPCNTDQ = bAVX512F && testBit (ecx cpuid_07_0) 14
bAVX512_VPOPCNTDQ_VL256 = (bAVX512_VPOPCNTDQ && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512_VPOPCNTDQ_VL512 = bAVX512_VPOPCNTDQ || (bAVX10_1 && bAVX10_VL512)
bAVX512BW = bAVX512F && testBit (ebx cpuid_07_0) 30
bAVX512BW_MASK = bAVX512BW || bAVX10_1
bAVX512BW_VL256 = (bAVX512BW && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512BW_VL512 = bAVX512BW || (bAVX10_1 && bAVX10_VL512)
bAVX512CD = bAVX512F && testBit (ebx cpuid_07_0) 28
bAVX512CD_VL256 = (bAVX512CD && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512CD_VL512 = bAVX512CD || (bAVX10_1 && bAVX10_VL512)
bAVX512DQ = bAVX512F && testBit (ebx cpuid_07_0) 17
bAVX512DQ_SCALAR = bAVX512DQ || (bAVX10_1 && bAVX10_VL256)
bAVX512DQ_VL256 = (bAVX512DQ && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512DQ_VL512 = bAVX512DQ || (bAVX10_1 && bAVX10_VL512)
{-# NOINLINE bAVX512F #-}
#if defined(darwin_HOST_OS)
bAVX512F = hs_cpu_features_sysctl "hw.optional.avx512f"# -- AVX-512 support on macOS is on-demand, that is, XCR0 is cleared by default.
#else
bAVX512F = (ecx cpuid_01 .&. bit 27) == bit 27 && (xgetbv 0 .&. 0xe6) == 0xe6 && testBit (ebx cpuid_07_0) 16 -- CPUID.1:ECX[bit 27]: OSXSAVE
#endif
bAVX512F_SCALAR = bAVX512F || (bAVX10_1 && bAVX10_VL256)
bAVX512F_VL256 = (bAVX512F && bAVX512VL) || (bAVX10_1 && bAVX10_VL256)
bAVX512F_VL512 = bAVX512F || (bAVX10_1 && bAVX10_VL512)
bAVX512VL = testBit (ebx cpuid_07_0) 31
bBMI1 = testBit (ebx cpuid_07_0) 3
bBMI2 = testBit (ebx cpuid_07_0) 8
bF16C = bAVX && testBit (ecx cpuid_01) 29
bFMA = bAVX && testBit (ecx cpuid_01) 12
bGFNI = testBit (ecx cpuid_07_0) 8
bPCLMULQDQ = testBit (ecx cpuid_01) 1
bPOPCNT = testBit (ecx cpuid_01) 23
bRDRAND = testBit (ecx cpuid_01) 30
bSHA = testBit (ebx cpuid_07_0) 29
bSSE3 = testBit (ecx cpuid_01) 0
bSSE4_1 = testBit (ecx cpuid_01) 19
bSSE4_2 = testBit (ecx cpuid_01) 20
bSSSE3 = testBit (ecx cpuid_01) 9
bVAES = testBit (ecx cpuid_07_0) 9
bVPCLMULQDQ = testBit (ecx cpuid_07_0) 10

#else

{-# INLINE bAESNI #-}
bAESNI = False

{-# INLINE bAMX_BF16 #-}
bAMX_BF16 = False

{-# INLINE bAMX_FP16 #-}
bAMX_FP16 = False

{-# INLINE bAMX_INT8 #-}
bAMX_INT8 = False

{-# INLINE bAMX_TILE #-}
bAMX_TILE = False

{-# INLINE bAVX #-}
bAVX = False

{-# INLINE bAVX_VNNI #-}
bAVX_VNNI = False

{-# INLINE bAVX10_1 #-}
bAVX10_1 = False

{-# INLINE bAVX10_2 #-}
bAVX10_2 = False

{-# INLINE bAVX10_VL256 #-}
bAVX10_VL256 = False

{-# INLINE bAVX10_VL512 #-}
bAVX10_VL512 = False

{-# INLINE bAVX2 #-}
bAVX2 = False

{-# INLINE bAVX512_BF16 #-}
bAVX512_BF16 = False

{-# INLINE bAVX512_BF16_VL256 #-}
bAVX512_BF16_VL256 = False

{-# INLINE bAVX512_BF16_VL512 #-}
bAVX512_BF16_VL512 = False

{-# INLINE bAVX512_BITALG #-}
bAVX512_BITALG = False

{-# INLINE bAVX512_BITALG_VL256 #-}
bAVX512_BITALG_VL256 = False

{-# INLINE bAVX512_BITALG_VL512 #-}
bAVX512_BITALG_VL512 = False

{-# INLINE bAVX512_FP16 #-}
bAVX512_FP16 = False

{-# INLINE bAVX512_FP16_SCALAR #-}
bAVX512_FP16_SCALAR = False

{-# INLINE bAVX512_FP16_VL256 #-}
bAVX512_FP16_VL256 = False

{-# INLINE bAVX512_FP16_VL512 #-}
bAVX512_FP16_VL512 = False

{-# INLINE bAVX512_IFMA #-}
bAVX512_IFMA = False

{-# INLINE bAVX512_IFMA_VL256 #-}
bAVX512_IFMA_VL256 = False

{-# INLINE bAVX512_IFMA_VL512 #-}
bAVX512_IFMA_VL512 = False

{-# INLINE bAVX512_VBMI #-}
bAVX512_VBMI = False

{-# INLINE bAVX512_VBMI_VL256 #-}
bAVX512_VBMI_VL256 = False

{-# INLINE bAVX512_VBMI_VL512 #-}
bAVX512_VBMI_VL512 = False

{-# INLINE bAVX512_VBMI2 #-}
bAVX512_VBMI2 = False

{-# INLINE bAVX512_VBMI2_VL256 #-}
bAVX512_VBMI2_VL256 = False

{-# INLINE bAVX512_VBMI2_VL512 #-}
bAVX512_VBMI2_VL512 = False

{-# INLINE bAVX512_VNNI #-}
bAVX512_VNNI = False

{-# INLINE bAVX512_VNNI_VL256 #-}
bAVX512_VNNI_VL256 = False

{-# INLINE bAVX512_VNNI_VL512 #-}
bAVX512_VNNI_VL512 = False

{-# INLINE bAVX512_VPOPCNTDQ #-}
bAVX512_VPOPCNTDQ = False

{-# INLINE bAVX512_VPOPCNTDQ_VL256 #-}
bAVX512_VPOPCNTDQ_VL256 = False

{-# INLINE bAVX512_VPOPCNTDQ_VL512 #-}
bAVX512_VPOPCNTDQ_VL512 = False

{-# INLINE bAVX512BW #-}
bAVX512BW = False

{-# INLINE bAVX512BW_MASK #-}
bAVX512BW_MASK = False

{-# INLINE bAVX512BW_VL256 #-}
bAVX512BW_VL256 = False

{-# INLINE bAVX512BW_VL512 #-}
bAVX512BW_VL512 = False

{-# INLINE bAVX512CD #-}
bAVX512CD = False

{-# INLINE bAVX512CD_VL256 #-}
bAVX512CD_VL256 = False

{-# INLINE bAVX512CD_VL512 #-}
bAVX512CD_VL512 = False

{-# INLINE bAVX512DQ #-}
bAVX512DQ = False

{-# INLINE bAVX512DQ_SCALAR #-}
bAVX512DQ_SCALAR = False

{-# INLINE bAVX512DQ_VL256 #-}
bAVX512DQ_VL256 = False

{-# INLINE bAVX512DQ_VL512 #-}
bAVX512DQ_VL512 = False

{-# INLINE bAVX512F #-}
bAVX512F = False

{-# INLINE bAVX512F_SCALAR #-}
bAVX512F_SCALAR = False

{-# INLINE bAVX512F_VL256 #-}
bAVX512F_VL256 = False

{-# INLINE bAVX512F_VL512 #-}
bAVX512F_VL512 = False

{-# INLINE bAVX512VL #-}
bAVX512VL = False

{-# INLINE bBMI1 #-}
bBMI1 = False

{-# INLINE bBMI2 #-}
bBMI2 = False

{-# INLINE bF16C #-}
bF16C = False

{-# INLINE bFMA #-}
bFMA = False

{-# INLINE bGFNI #-}
bGFNI = False

{-# INLINE bPCLMULQDQ #-}
bPCLMULQDQ = False

{-# INLINE bPOPCNT #-}
bPOPCNT = False

{-# INLINE bRDRAND #-}
bRDRAND = False

{-# INLINE bSHA #-}
bSHA = False

{-# INLINE bSSE3 #-}
bSSE3 = False

{-# INLINE bSSE4_1 #-}
bSSE4_1 = False

{-# INLINE bSSE4_2 #-}
bSSE4_2 = False

{-# INLINE bSSSE3 #-}
bSSSE3 = False

{-# INLINE bVAES #-}
bVAES = False

{-# INLINE bVPCLMULQDQ #-}
bVPCLMULQDQ = False

{-# INLINE mAVX10 #-}
mAVX10 = Nothing

#endif

sAESNI = unsafeBoolToSBool bAESNI
sAMX_BF16 = unsafeBoolToSBool bAMX_BF16
sAMX_FP16 = unsafeBoolToSBool bAMX_FP16
sAMX_INT8 = unsafeBoolToSBool bAMX_INT8
sAMX_TILE = unsafeBoolToSBool bAMX_TILE
sAVX = unsafeBoolToSBool bAVX
sAVX_VNNI = unsafeBoolToSBool bAVX_VNNI
sAVX10_1 = unsafeBoolToSBool bAVX10_1
sAVX10_2 = unsafeBoolToSBool bAVX10_2
sAVX10_VL256 = unsafeBoolToSBool bAVX10_VL256
sAVX10_VL512 = unsafeBoolToSBool bAVX10_VL512
sAVX2 = unsafeBoolToSBool bAVX2
sAVX512_BF16 = unsafeBoolToSBool bAVX512_BF16
sAVX512_BF16_VL256 = unsafeBoolToSBool bAVX512_BF16_VL256
sAVX512_BF16_VL512 = unsafeBoolToSBool bAVX512_BF16_VL512
sAVX512_BITALG = unsafeBoolToSBool bAVX512_BITALG
sAVX512_BITALG_VL256 = unsafeBoolToSBool bAVX512_BITALG_VL256
sAVX512_BITALG_VL512 = unsafeBoolToSBool bAVX512_BITALG_VL512
sAVX512_FP16 = unsafeBoolToSBool bAVX512_FP16
sAVX512_FP16_SCALAR = unsafeBoolToSBool bAVX512_FP16_SCALAR
sAVX512_FP16_VL256 = unsafeBoolToSBool bAVX512_FP16_VL256
sAVX512_FP16_VL512 = unsafeBoolToSBool bAVX512_FP16_VL512
sAVX512_IFMA = unsafeBoolToSBool bAVX512_IFMA
sAVX512_IFMA_VL256 = unsafeBoolToSBool bAVX512_IFMA_VL256
sAVX512_IFMA_VL512 = unsafeBoolToSBool bAVX512_IFMA_VL512
sAVX512_VBMI = unsafeBoolToSBool bAVX512_VBMI
sAVX512_VBMI_VL256 = unsafeBoolToSBool bAVX512_VBMI_VL256
sAVX512_VBMI_VL512 = unsafeBoolToSBool bAVX512_VBMI_VL512
sAVX512_VBMI2 = unsafeBoolToSBool bAVX512_VBMI2
sAVX512_VBMI2_VL256 = unsafeBoolToSBool bAVX512_VBMI2_VL256
sAVX512_VBMI2_VL512 = unsafeBoolToSBool bAVX512_VBMI2_VL512
sAVX512_VNNI = unsafeBoolToSBool bAVX512_VNNI
sAVX512_VNNI_VL256 = unsafeBoolToSBool bAVX512_VNNI_VL256
sAVX512_VNNI_VL512 = unsafeBoolToSBool bAVX512_VNNI_VL512
sAVX512_VPOPCNTDQ = unsafeBoolToSBool bAVX512_VPOPCNTDQ
sAVX512_VPOPCNTDQ_VL256 = unsafeBoolToSBool bAVX512_VPOPCNTDQ_VL256
sAVX512_VPOPCNTDQ_VL512 = unsafeBoolToSBool bAVX512_VPOPCNTDQ_VL512
sAVX512BW = unsafeBoolToSBool bAVX512BW
sAVX512BW_MASK = unsafeBoolToSBool bAVX512BW_MASK
sAVX512BW_VL256 = unsafeBoolToSBool bAVX512BW_VL256
sAVX512BW_VL512 = unsafeBoolToSBool bAVX512BW_VL512
sAVX512CD = unsafeBoolToSBool bAVX512CD
sAVX512CD_VL256 = unsafeBoolToSBool bAVX512CD_VL256
sAVX512CD_VL512 = unsafeBoolToSBool bAVX512CD_VL512
sAVX512DQ = unsafeBoolToSBool bAVX512DQ
sAVX512DQ_SCALAR = unsafeBoolToSBool bAVX512DQ_SCALAR
sAVX512DQ_VL256 = unsafeBoolToSBool bAVX512DQ_VL256
sAVX512DQ_VL512 = unsafeBoolToSBool bAVX512DQ_VL512
sAVX512F = unsafeBoolToSBool bAVX512F
sAVX512F_SCALAR = unsafeBoolToSBool bAVX512F_SCALAR
sAVX512F_VL256 = unsafeBoolToSBool bAVX512F_VL256
sAVX512F_VL512 = unsafeBoolToSBool bAVX512F_VL512
sAVX512VL = unsafeBoolToSBool bAVX512VL
sBMI1 = unsafeBoolToSBool bBMI1
sBMI2 = unsafeBoolToSBool bBMI2
sF16C = unsafeBoolToSBool bF16C
sFMA = unsafeBoolToSBool bFMA
sGFNI = unsafeBoolToSBool bGFNI
sPCLMULQDQ = unsafeBoolToSBool bPCLMULQDQ
sPOPCNT = unsafeBoolToSBool bPOPCNT
sRDRAND = unsafeBoolToSBool bRDRAND
sSHA = unsafeBoolToSBool bSHA
sSSE3 = unsafeBoolToSBool bSSE3
sSSE4_1 = unsafeBoolToSBool bSSE4_1
sSSE4_2 = unsafeBoolToSBool bSSE4_2
sSSSE3 = unsafeBoolToSBool bSSSE3
sVAES = unsafeBoolToSBool bVAES
sVPCLMULQDQ = unsafeBoolToSBool bVPCLMULQDQ
